buildscript {

    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath 'com.github.dcendents:android-maven-plugin:1.2'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
        classpath "com.google.gms:google-services:3.0.0"
//
//        classpath 'me.tatarka:gradle-retrolambda:3.7.1'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'
//apply plugin: 'me.tatarka.retrolambda'

group = 'im.actor'
version = '0.0.1'

def baseVersion = "3.0"

android {

    compileSdkVersion 29
    buildToolsVersion '29.0.2'

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 29
        multiDexEnabled true

//        ndk {
//            abiFilters "armeabi", "armeabi-v7a", "x86", "mips"
//        }

        multiDexEnabled true

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        sit {
            versionNameSuffix = baseVersion
            matchingFallbacks = ['release']
        }

        innerTest {
            matchingFallbacks = ['release', 'sit']
        }
    }

    sourceSets {
        main {

            res {
                srcDirs = ['src/main/res',
                           'src/main/res-material']
            }

            resources {
                srcDirs = ['../../sdk-core/core/core-shared/src/main/resources']
            }

            assets {
                srcDirs = ['../../sdk-core/core/core-shared/src/main/resources',
                           'src/main/assets']
            }

            java {
                srcDirs = ['src/main/java',
                           '../../sdk-core/core/core-shared/src/main/java',
                           '../../sdk-core/core/core-android/src/main/java',
                           '../../sdk-core/runtime/runtime-shared/src/main/java',
                           '../../sdk-core/runtime/runtime-generic/src/main/java',
                           '../../sdk-core/runtime/runtime-android/src/main/java']
            }
        }
    }

    lintOptions {
        abortOnError false
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    // Calls
    // UI
    // Not Enabling animated WebP yet
//    implementation('com.github.chrisbanes.photoview:library:1.2.4') {
//        exclude module: 'support-v13'
//    }
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.4'
    // Phone parser
    implementation files('libs/libphonenumber-5.9.jar')
    // Core
    // Android Support
    //google service
    //    compile files('libs/MiPush_SDK_Client_3_2_2.jar')
    //    compile files('libs/pushservice-5.3.0.99.jar')
    //    compile(name: 'HMS-SDK-2.4.0.300', ext: 'aar')

    implementation project(':actor-sdk:sdk-core-android:android-eaglesoft-push')
    implementation project(':actor-sdk:sdk-core-android:webView_jsBridge')
    implementation 'com.github.chrisbanes:PhotoView:2.0.0'
    implementation 'io.pristine:libjingle:11139@aar'
    implementation 'com.facebook.fresco:fresco:2.0.0'
    implementation 'com.facebook.fresco:animated-gif:2.0.0'
    implementation 'com.facebook.fresco:webpsupport:2.0.0'
    implementation 'com.github.castorflex.smoothprogressbar:library-circular:1.3.0'
    implementation 'com.facebook.rebound:rebound:0.3.8'
    implementation 'com.rengwuxian.materialedittext:library:2.1.4'
    implementation 'com.soundcloud.android:android-crop:1.0.1@aar'
    implementation 'com.droidkit:progress:0.5'
    implementation 'com.getbase:floatingactionbutton:1.10.1'
    implementation 'com.squareup.okhttp:okhttp:2.7.5'
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.2'
//    implementation 'com.android.support:support-v4:28.0.0'
//    implementation 'com.android.support:support-v13:28.0.0'
//    implementation 'com.android.support:appcompat-v7:28.0.0'
//    implementation 'com.android.support:palette-v7:28.0.0'
//    implementation 'com.android.support:recyclerview-v7:28.0.0'
//    implementation 'com.android.support:design:28.0.0'
//    implementation 'com.android.support:customtabs:28.0.0'


    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0-rc01'
    implementation 'androidx.browser:browser:1.0.0'

    //    compile 'com.google.android.gms:play-services-places:9.4.0'
    //    compile 'com.google.android.gms:play-services-plus:11.0.4'
    implementation files('libs/ksoap2-android-assembly-2.6.5-jar-with-dependencies.jar')
//    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.2'
    implementation files('libs/httpclient-4.2.jar')
    implementation files('libs/httpclient-cache-4.2.jar')
    implementation files('libs/httpcore-4.2.jar')
    implementation files('libs/httpmime-4.2.jar')
    implementation files('libs/tbs_sdk_thirdapp_v3.2.jar')
}
repositories {
//    flatDir { dirs 'aars' }
    mavenCentral()
}
//
// Publishing of SDK to Maven Central
//Â©

//
// Prepare Android JavaDocs and Sources jar
//

android.libraryVariants.all { variant ->

    task("javadoc${variant.name.capitalize()}", type: Javadoc, dependsOn: "assemble${variant.name.capitalize()}") {

        title = "Actor SDK for Android"

//        JavaCompile javaCompile
//        if (variant.hasProperty('javaCompileProvider')) {
        //android gradle 3.3.0 +
//            javaCompile = variant.javaCompileProvider.get()
//        } else {
//            javaCompile = variant.javaCompile
//        }

        // Sources
        source = variant.javaCompileProvider.get().source

        // First add all of your dependencies to the classpath, then add the android jars
        doFirst {
            classpath += files(variant.javaCompileProvider.get().classpath.files)
            classpath += files(android.getBootClasspath())
        }


        // Configuration
        options.links("http://d.android.com/reference")
        failOnError = false // TODO: Fix all errors

        // We're excluding these generated files
        // TODO: Fix
        // exclude '**/BuildConfig.java'
        // exclude '**/R.java'
    }

    task("javadocJar${variant.name.capitalize()}", type: Jar, dependsOn: "javadoc${variant.name.capitalize()}") {
        classifier 'javadoc'
        destinationDir = file("$project.buildDir/libs/")
        from "$project.buildDir/javadoc/$variant.name"
    }

    task("sourcesJar${variant.name.capitalize()}", type: Jar, dependsOn: "assemble${variant.name.capitalize()}") {
        classifier 'sources'
        destinationDir = file("$project.buildDir/libs/")
        from variant.javaCompileProvider.get().source
    }
}

//
// Configuration of publishing
//
def ossrhUsername = ""
def ossrhPassword = ""
boolean isDeployConfigured = false
if (project.rootProject.file('gradle.properties').exists()) {
    def propertBuildConfigFieldies = properties()
    properties.load(project.rootProject.file('gradle.properties').newDataInputStream())
    ossrhUsername = properties.getProperty("ossrhUsername", "")
    ossrhPassword = properties.getProperty("ossrhPassword", "")
    version = baseVersion + "." + properties.getProperty("build_index", "")

    print("##teamcity[buildNumber '$version']")

    nexusStaging {
        username ossrhUsername
        password ossrhPassword
    }

    isDeployConfigured = true
}

project.afterEvaluate {

    artifacts {
        archives javadocJarRelease
        archives sourcesJarRelease
    }

    if (isDeployConfigured) {

        signing {
            sign configurations.archives
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    pom.project {
                        name 'Actor SDK for Android'
                        packaging 'aar'
                        description 'Actor SDK: Embedding mobile messaging to Android App'
                        url 'https://github.com/actorapp/actor-platform'

                        scm {
                            url 'scm:git@github.com:actorapp/actor-platform.git'
                            connection 'scm:git@github.com:actorapp/actor-platform.git'
                            developerConnection 'scm:git@github.com:actorapp/actor-platform.git'
                        }

                        licenses {
                            license {
                                name 'The MIT License (MIT)'
                                url 'http://opensource.org/licenses/MIT'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'ex3ndr'
                                name 'Stepan Korshakov'
                            }
                        }
                    }
                }
            }
        }
    }
}
